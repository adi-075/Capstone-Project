generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model courses {
  course_id       Int               @id @default(autoincrement())
  course_name     String            @db.VarChar(255)
  course_code     String            @unique @db.VarChar(50)
  professor_id    Int?
  professors      professors?       @relation(fields: [professor_id], references: [professor_id], onUpdate: NoAction)
  student_courses student_courses[]
}

model locations {
  location_id   Int    @id @default(autoincrement())
  building_name String @db.VarChar(255)
  room_number   String @db.VarChar(50)
}

model professors {
  professor_id Int       @id @default(autoincrement())
  name         String    @db.VarChar(255)
  email        String    @unique @db.VarChar(255)
  department   String    @db.VarChar(255)
  courses      courses[]
}

model student_courses {
  enrollment_id   Int       @id @default(autoincrement())
  rocket_id       String?   @db.VarChar(10)
  course_id       Int?
  enrollment_date DateTime? @default(now()) @db.Timestamp(6)
  courses         courses?  @relation(fields: [course_id], references: [course_id], onDelete: Cascade, onUpdate: NoAction)
  students        students? @relation(fields: [rocket_id], references: [rocket_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model students {
  rocket_id       String            @id @db.VarChar(10)
  name            String            @db.VarChar(255)
  email           String            @unique @db.VarChar(255)
  major           String            @db.VarChar(255)
  year            Int
  student_courses student_courses[]
  user_auth       user_auth?
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model user_auth {
  id            Int       @id @default(autoincrement())
  student_id    String    @unique @db.VarChar(10)
  email         String    @unique @db.VarChar(255)
  password_hash String
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  students      students  @relation(fields: [student_id], references: [rocket_id], onDelete: Cascade, onUpdate: NoAction)
}
